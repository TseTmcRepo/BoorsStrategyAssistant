//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TsetmcLib.ServiceReference1 {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://tsetmc.com/", ConfigurationName="ServiceReference1.TsePublicV2Soap")]
    public interface TsePublicV2Soap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/ClientType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable ClientType(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/ClientType", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> ClientTypeAsync(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/Auction", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable Auction(string UserName, string Password, long from);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/Auction", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> AuctionAsync(string UserName, string Password, long from);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/Board", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet Board(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/Board", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> BoardAsync(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/Sector", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet Sector(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/Sector", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> SectorAsync(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/SubSector", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet SubSector(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/SubSector", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> SubSectorAsync(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/TradeLastDay", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet TradeLastDay(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/TradeLastDay", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> TradeLastDayAsync(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/TradeOneDay", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet TradeOneDay(string UserName, string Password, int SelDate, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/TradeOneDay", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> TradeOneDayAsync(string UserName, string Password, int SelDate, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/TradeOneDayAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet TradeOneDayAll(string UserName, string Password, int SelDate, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/TradeOneDayAll", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> TradeOneDayAllAsync(string UserName, string Password, int SelDate, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/InstTrade", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet InstTrade(string UserName, string Password, long Inscode, int DateFrom, int DateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/InstTrade", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> InstTradeAsync(string UserName, string Password, long Inscode, int DateFrom, int DateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/MarketActivityDaily", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet MarketActivityDaily(string UserName, string Password, int DateFrom, int DateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/MarketActivityDaily", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> MarketActivityDailyAsync(string UserName, string Password, int DateFrom, int DateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/BestLimitsAllIns", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet BestLimitsAllIns(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/BestLimitsAllIns", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> BestLimitsAllInsAsync(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/BestLimitOneIns", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet BestLimitOneIns(string UserName, string Password, long InsCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/BestLimitOneIns", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> BestLimitOneInsAsync(string UserName, string Password, long InsCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/InstWithBestLimit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet InstWithBestLimit(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/InstWithBestLimit", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> InstWithBestLimitAsync(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/Instrument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet Instrument(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/Instrument", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> InstrumentAsync(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/InstrumentFilterByDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet InstrumentFilterByDate(string UserName, string Password, int DEven, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/InstrumentFilterByDate", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> InstrumentFilterByDateAsync(string UserName, string Password, int DEven, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/Company", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet Company(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/Company", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> CompanyAsync(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/InstrumentsState", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet InstrumentsState(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/InstrumentsState", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> InstrumentsStateAsync(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/InstrumentsStateChange", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet InstrumentsStateChange(string UserName, string Password, int DEven, long Inscode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/InstrumentsStateChange", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> InstrumentsStateChangeAsync(string UserName, string Password, int DEven, long Inscode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/IndexB1LastDayLastData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet IndexB1LastDayLastData(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/IndexB1LastDayLastData", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> IndexB1LastDayLastDataAsync(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/IndexB1LastDayOneInst", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet IndexB1LastDayOneInst(string UserName, string Password, long IdxCode, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/IndexB1LastDayOneInst", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> IndexB1LastDayOneInstAsync(string UserName, string Password, long IdxCode, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/IndexB2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet IndexB2(string UserName, string Password, int DEven);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/IndexB2", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> IndexB2Async(string UserName, string Password, int DEven);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/IndexInstrument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet IndexInstrument(string UserName, string Password, long IdxCode, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/IndexInstrument", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> IndexInstrumentAsync(string UserName, string Password, long IdxCode, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/InstAffect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet InstAffect(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/InstAffect", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> InstAffectAsync(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/InstAffectByFlow", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet InstAffectByFlow(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/InstAffectByFlow", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> InstAffectByFlowAsync(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/TOP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet TOP(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/TOP", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> TOPAsync(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/Msg", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet Msg(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/Msg", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> MsgAsync(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/StaticThresholds", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet StaticThresholds(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/StaticThresholds", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> StaticThresholdsAsync(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/MarketValue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        decimal MarketValue(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/MarketValue", ReplyAction="*")]
        System.Threading.Tasks.Task<decimal> MarketValueAsync(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/MarketValueByDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        decimal MarketValueByDate(string UserName, string Password, int DEven);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/MarketValueByDate", ReplyAction="*")]
        System.Threading.Tasks.Task<decimal> MarketValueByDateAsync(string UserName, string Password, int DEven);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/FutureInformation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable FutureInformation(string UserName, string Password, int DEven);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/FutureInformation", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> FutureInformationAsync(string UserName, string Password, int DEven);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/AdjPrice", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet AdjPrice(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/AdjPrice", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> AdjPriceAsync(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/ShareChange", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet ShareChange(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/ShareChange", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> ShareChangeAsync(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/MarketActivityLast", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet MarketActivityLast(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/MarketActivityLast", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> MarketActivityLastAsync(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/SectorState", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet SectorState(string UserName, string Password, int DEven);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/SectorState", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> SectorStateAsync(string UserName, string Password, int DEven);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/NSCStart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet NSCStart(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/NSCStart", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> NSCStartAsync(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/PowerInstrument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet PowerInstrument(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/PowerInstrument", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> PowerInstrumentAsync(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/PowerInstrumentHistory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet PowerInstrumentHistory(string UserName, string Password, long From);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/PowerInstrumentHistory", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> PowerInstrumentHistoryAsync(string UserName, string Password, long From);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/Option", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet Option(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/Option", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> OptionAsync(string UserName, string Password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface TsePublicV2SoapChannel : TsetmcLib.ServiceReference1.TsePublicV2Soap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TsePublicV2SoapClient : System.ServiceModel.ClientBase<TsetmcLib.ServiceReference1.TsePublicV2Soap>, TsetmcLib.ServiceReference1.TsePublicV2Soap {
        
        public TsePublicV2SoapClient() {
        }
        
        public TsePublicV2SoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TsePublicV2SoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TsePublicV2SoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TsePublicV2SoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataTable ClientType(string UserName, string Password) {
            return base.Channel.ClientType(UserName, Password);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> ClientTypeAsync(string UserName, string Password) {
            return base.Channel.ClientTypeAsync(UserName, Password);
        }
        
        public System.Data.DataTable Auction(string UserName, string Password, long from) {
            return base.Channel.Auction(UserName, Password, from);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> AuctionAsync(string UserName, string Password, long from) {
            return base.Channel.AuctionAsync(UserName, Password, from);
        }
        
        public System.Data.DataSet Board(string UserName, string Password) {
            return base.Channel.Board(UserName, Password);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> BoardAsync(string UserName, string Password) {
            return base.Channel.BoardAsync(UserName, Password);
        }
        
        public System.Data.DataSet Sector(string UserName, string Password) {
            return base.Channel.Sector(UserName, Password);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SectorAsync(string UserName, string Password) {
            return base.Channel.SectorAsync(UserName, Password);
        }
        
        public System.Data.DataSet SubSector(string UserName, string Password) {
            return base.Channel.SubSector(UserName, Password);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SubSectorAsync(string UserName, string Password) {
            return base.Channel.SubSectorAsync(UserName, Password);
        }
        
        public System.Data.DataSet TradeLastDay(string UserName, string Password, byte Flow) {
            return base.Channel.TradeLastDay(UserName, Password, Flow);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> TradeLastDayAsync(string UserName, string Password, byte Flow) {
            return base.Channel.TradeLastDayAsync(UserName, Password, Flow);
        }
        
        public System.Data.DataSet TradeOneDay(string UserName, string Password, int SelDate, byte Flow) {
            return base.Channel.TradeOneDay(UserName, Password, SelDate, Flow);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> TradeOneDayAsync(string UserName, string Password, int SelDate, byte Flow) {
            return base.Channel.TradeOneDayAsync(UserName, Password, SelDate, Flow);
        }
        
        public System.Data.DataSet TradeOneDayAll(string UserName, string Password, int SelDate, byte Flow) {
            return base.Channel.TradeOneDayAll(UserName, Password, SelDate, Flow);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> TradeOneDayAllAsync(string UserName, string Password, int SelDate, byte Flow) {
            return base.Channel.TradeOneDayAllAsync(UserName, Password, SelDate, Flow);
        }
        
        public System.Data.DataSet InstTrade(string UserName, string Password, long Inscode, int DateFrom, int DateTo) {
            return base.Channel.InstTrade(UserName, Password, Inscode, DateFrom, DateTo);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> InstTradeAsync(string UserName, string Password, long Inscode, int DateFrom, int DateTo) {
            return base.Channel.InstTradeAsync(UserName, Password, Inscode, DateFrom, DateTo);
        }
        
        public System.Data.DataSet MarketActivityDaily(string UserName, string Password, int DateFrom, int DateTo) {
            return base.Channel.MarketActivityDaily(UserName, Password, DateFrom, DateTo);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> MarketActivityDailyAsync(string UserName, string Password, int DateFrom, int DateTo) {
            return base.Channel.MarketActivityDailyAsync(UserName, Password, DateFrom, DateTo);
        }
        
        public System.Data.DataSet BestLimitsAllIns(string UserName, string Password, byte Flow) {
            return base.Channel.BestLimitsAllIns(UserName, Password, Flow);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> BestLimitsAllInsAsync(string UserName, string Password, byte Flow) {
            return base.Channel.BestLimitsAllInsAsync(UserName, Password, Flow);
        }
        
        public System.Data.DataSet BestLimitOneIns(string UserName, string Password, long InsCode) {
            return base.Channel.BestLimitOneIns(UserName, Password, InsCode);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> BestLimitOneInsAsync(string UserName, string Password, long InsCode) {
            return base.Channel.BestLimitOneInsAsync(UserName, Password, InsCode);
        }
        
        public System.Data.DataSet InstWithBestLimit(string UserName, string Password, byte Flow) {
            return base.Channel.InstWithBestLimit(UserName, Password, Flow);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> InstWithBestLimitAsync(string UserName, string Password, byte Flow) {
            return base.Channel.InstWithBestLimitAsync(UserName, Password, Flow);
        }
        
        public System.Data.DataSet Instrument(string UserName, string Password, byte Flow) {
            return base.Channel.Instrument(UserName, Password, Flow);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> InstrumentAsync(string UserName, string Password, byte Flow) {
            return base.Channel.InstrumentAsync(UserName, Password, Flow);
        }
        
        public System.Data.DataSet InstrumentFilterByDate(string UserName, string Password, int DEven, byte Flow) {
            return base.Channel.InstrumentFilterByDate(UserName, Password, DEven, Flow);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> InstrumentFilterByDateAsync(string UserName, string Password, int DEven, byte Flow) {
            return base.Channel.InstrumentFilterByDateAsync(UserName, Password, DEven, Flow);
        }
        
        public System.Data.DataSet Company(string UserName, string Password, byte Flow) {
            return base.Channel.Company(UserName, Password, Flow);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CompanyAsync(string UserName, string Password, byte Flow) {
            return base.Channel.CompanyAsync(UserName, Password, Flow);
        }
        
        public System.Data.DataSet InstrumentsState(string UserName, string Password, byte Flow) {
            return base.Channel.InstrumentsState(UserName, Password, Flow);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> InstrumentsStateAsync(string UserName, string Password, byte Flow) {
            return base.Channel.InstrumentsStateAsync(UserName, Password, Flow);
        }
        
        public System.Data.DataSet InstrumentsStateChange(string UserName, string Password, int DEven, long Inscode) {
            return base.Channel.InstrumentsStateChange(UserName, Password, DEven, Inscode);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> InstrumentsStateChangeAsync(string UserName, string Password, int DEven, long Inscode) {
            return base.Channel.InstrumentsStateChangeAsync(UserName, Password, DEven, Inscode);
        }
        
        public System.Data.DataSet IndexB1LastDayLastData(string UserName, string Password, byte Flow) {
            return base.Channel.IndexB1LastDayLastData(UserName, Password, Flow);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> IndexB1LastDayLastDataAsync(string UserName, string Password, byte Flow) {
            return base.Channel.IndexB1LastDayLastDataAsync(UserName, Password, Flow);
        }
        
        public System.Data.DataSet IndexB1LastDayOneInst(string UserName, string Password, long IdxCode, byte Flow) {
            return base.Channel.IndexB1LastDayOneInst(UserName, Password, IdxCode, Flow);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> IndexB1LastDayOneInstAsync(string UserName, string Password, long IdxCode, byte Flow) {
            return base.Channel.IndexB1LastDayOneInstAsync(UserName, Password, IdxCode, Flow);
        }
        
        public System.Data.DataSet IndexB2(string UserName, string Password, int DEven) {
            return base.Channel.IndexB2(UserName, Password, DEven);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> IndexB2Async(string UserName, string Password, int DEven) {
            return base.Channel.IndexB2Async(UserName, Password, DEven);
        }
        
        public System.Data.DataSet IndexInstrument(string UserName, string Password, long IdxCode, byte Flow) {
            return base.Channel.IndexInstrument(UserName, Password, IdxCode, Flow);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> IndexInstrumentAsync(string UserName, string Password, long IdxCode, byte Flow) {
            return base.Channel.IndexInstrumentAsync(UserName, Password, IdxCode, Flow);
        }
        
        public System.Data.DataSet InstAffect(string UserName, string Password) {
            return base.Channel.InstAffect(UserName, Password);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> InstAffectAsync(string UserName, string Password) {
            return base.Channel.InstAffectAsync(UserName, Password);
        }
        
        public System.Data.DataSet InstAffectByFlow(string UserName, string Password, byte Flow) {
            return base.Channel.InstAffectByFlow(UserName, Password, Flow);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> InstAffectByFlowAsync(string UserName, string Password, byte Flow) {
            return base.Channel.InstAffectByFlowAsync(UserName, Password, Flow);
        }
        
        public System.Data.DataSet TOP(string UserName, string Password, byte Flow) {
            return base.Channel.TOP(UserName, Password, Flow);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> TOPAsync(string UserName, string Password, byte Flow) {
            return base.Channel.TOPAsync(UserName, Password, Flow);
        }
        
        public System.Data.DataSet Msg(string UserName, string Password) {
            return base.Channel.Msg(UserName, Password);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> MsgAsync(string UserName, string Password) {
            return base.Channel.MsgAsync(UserName, Password);
        }
        
        public System.Data.DataSet StaticThresholds(string UserName, string Password, byte Flow) {
            return base.Channel.StaticThresholds(UserName, Password, Flow);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> StaticThresholdsAsync(string UserName, string Password, byte Flow) {
            return base.Channel.StaticThresholdsAsync(UserName, Password, Flow);
        }
        
        public decimal MarketValue(string UserName, string Password) {
            return base.Channel.MarketValue(UserName, Password);
        }
        
        public System.Threading.Tasks.Task<decimal> MarketValueAsync(string UserName, string Password) {
            return base.Channel.MarketValueAsync(UserName, Password);
        }
        
        public decimal MarketValueByDate(string UserName, string Password, int DEven) {
            return base.Channel.MarketValueByDate(UserName, Password, DEven);
        }
        
        public System.Threading.Tasks.Task<decimal> MarketValueByDateAsync(string UserName, string Password, int DEven) {
            return base.Channel.MarketValueByDateAsync(UserName, Password, DEven);
        }
        
        public System.Data.DataTable FutureInformation(string UserName, string Password, int DEven) {
            return base.Channel.FutureInformation(UserName, Password, DEven);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> FutureInformationAsync(string UserName, string Password, int DEven) {
            return base.Channel.FutureInformationAsync(UserName, Password, DEven);
        }
        
        public System.Data.DataSet AdjPrice(string UserName, string Password, byte Flow) {
            return base.Channel.AdjPrice(UserName, Password, Flow);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> AdjPriceAsync(string UserName, string Password, byte Flow) {
            return base.Channel.AdjPriceAsync(UserName, Password, Flow);
        }
        
        public System.Data.DataSet ShareChange(string UserName, string Password, byte Flow) {
            return base.Channel.ShareChange(UserName, Password, Flow);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ShareChangeAsync(string UserName, string Password, byte Flow) {
            return base.Channel.ShareChangeAsync(UserName, Password, Flow);
        }
        
        public System.Data.DataSet MarketActivityLast(string UserName, string Password, byte Flow) {
            return base.Channel.MarketActivityLast(UserName, Password, Flow);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> MarketActivityLastAsync(string UserName, string Password, byte Flow) {
            return base.Channel.MarketActivityLastAsync(UserName, Password, Flow);
        }
        
        public System.Data.DataSet SectorState(string UserName, string Password, int DEven) {
            return base.Channel.SectorState(UserName, Password, DEven);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SectorStateAsync(string UserName, string Password, int DEven) {
            return base.Channel.SectorStateAsync(UserName, Password, DEven);
        }
        
        public System.Data.DataSet NSCStart(string UserName, string Password) {
            return base.Channel.NSCStart(UserName, Password);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> NSCStartAsync(string UserName, string Password) {
            return base.Channel.NSCStartAsync(UserName, Password);
        }
        
        public System.Data.DataSet PowerInstrument(string UserName, string Password) {
            return base.Channel.PowerInstrument(UserName, Password);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> PowerInstrumentAsync(string UserName, string Password) {
            return base.Channel.PowerInstrumentAsync(UserName, Password);
        }
        
        public System.Data.DataSet PowerInstrumentHistory(string UserName, string Password, long From) {
            return base.Channel.PowerInstrumentHistory(UserName, Password, From);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> PowerInstrumentHistoryAsync(string UserName, string Password, long From) {
            return base.Channel.PowerInstrumentHistoryAsync(UserName, Password, From);
        }
        
        public System.Data.DataSet Option(string UserName, string Password) {
            return base.Channel.Option(UserName, Password);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> OptionAsync(string UserName, string Password) {
            return base.Channel.OptionAsync(UserName, Password);
        }
    }
}
